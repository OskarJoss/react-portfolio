{"version":3,"sources":["contentful.js","components/Card.js","pages/Home.js","pages/SingleProject.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["client","require","createClient","space","process","accessToken","CardStyled","styled","a","Card","props","href","link","src","fields","image","file","url","alt","className","title","documentToReactComponents","summary","HomeStyled","div","Home","React","useState","projects","setProjects","useEffect","getEntries","content_type","then","entries","items","map","project","i","key","slug","SingleProject","setProject","length","from","to","noThrow","height","text","NotFound","App","path","default","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4MAOeA,EAPIC,EAAQ,KAEDC,aAAa,CACrCC,MAAOC,eACPC,YAAaD,gD,4iBCAf,IAAME,EAAaC,IAAOC,EAAV,KA4CDC,EAZF,SAACC,GACZ,OACE,kBAACJ,EAAD,CAAYK,KAAMD,EAAME,MACtB,yBAAKC,IAAG,UAAKH,EAAMI,OAAOC,MAAMD,OAAOE,KAAKC,IAApC,UAAiDC,IAAI,KAC7D,yBAAKC,UAAU,WACb,4BAAKT,EAAMI,OAAOM,OACjBC,oCAA0BX,EAAMI,OAAOQ,Y,4KCrChD,IAAMC,EAAahB,IAAOiB,IAAV,KAqCDC,EA7BF,WAAO,IAAD,EACeC,IAAMC,SAAS,MAD9B,mBACVC,EADU,KACAC,EADA,KAajB,OAVAH,IAAMI,WAAU,WACd9B,EACG+B,WAAW,CACVC,aAAc,YAEfC,MAAK,SAACC,GACLL,EAAYK,EAAQC,YAEvB,IAGD,kBAACZ,EAAD,KACGK,GACCA,EAASQ,KAAI,SAACC,EAASC,GACrB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLxB,OAAQuB,EAAQvB,OAChBF,KAAI,oBAAeyB,EAAQvB,OAAO0B,aCMjCC,EAnCO,SAAC/B,GAAW,IAAD,EACDgB,IAAMC,SAAS,MADd,mBACxBU,EADwB,KACfK,EADe,KAkB/B,OAfAhB,IAAMI,WAAU,WACd9B,EACG+B,WAAW,CACVC,aAAc,UACd,cAAetB,EAAM8B,OAEtBP,MAAK,SAACC,GACwB,IAAzBA,EAAQC,MAAMQ,OAChBD,EAAWR,EAAQC,MAAM,GAAGrB,QAE5B4B,EAAW,SAGhB,CAAChC,EAAM8B,OAENH,GAA8B,IAAnBA,EAAQM,OACd,kBAAC,IAAD,CAAUC,KAAK,GAAGC,GAAG,OAAOC,SAAO,IAI1C,yBAAK3B,UAAU,iBACb,4BAAKkB,GAAWA,EAAQjB,OACxB,yBACEP,IAAG,UAAKwB,GAAWA,EAAQtB,MAAMD,OAAOE,KAAKC,IAA1C,UACHC,IAAK,GACL6B,QAAM,IAEP1B,oCAA0BgB,GAAWA,EAAQW,QCxBrCC,EATE,WACf,OACE,6BACE,oDACA,uBAAGtC,KAAK,KAAR,aCaSuC,MAZf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAMgC,KAAK,MACX,kBAAC,EAAD,CAAeA,KAAK,mBACpB,kBAAC,EAAD,CAAUC,SAAO,OCDLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dedb0ea8.chunk.js","sourcesContent":["const contentful = require(\"contentful\");\n\nconst client = contentful.createClient({\n  space: process.env.REACT_APP_SPACE_ID,\n  accessToken: process.env.REACT_APP_ACCESS_TOKEN,\n});\n\nexport default client;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\";\n\nconst CardStyled = styled.a`\n  width: 280px;\n  height: 360px;\n  text-align: center;\n  background-color: antiquewhite;\n  margin: 7px;\n  display: flex;\n  flex-direction: column;\n  text-decoration: none;\n  overflow: hidden;\n\n  img {\n    width: 100%;\n    height: 40%;\n    min-height: 40%;\n    object-fit: cover;\n  }\n\n  .textBox {\n    padding: 5px;\n    text-overflow: ellipsis;\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  @media (max-width: 768px) {\n    width: calc(50vw - 14px);\n  }\n`;\n\nconst Card = (props) => {\n  return (\n    <CardStyled href={props.link}>\n      <img src={`${props.fields.image.fields.file.url}?w=280`} alt=\"\"></img>\n      <div className=\"textBox\">\n        <h1>{props.fields.title}</h1>\n        {documentToReactComponents(props.fields.summary)}\n      </div>\n    </CardStyled>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport client from \"../contentful\";\nimport Card from \"../components/Card\";\nimport styled from \"styled-components\";\n\nconst HomeStyled = styled.div`\n  min-height: 100vh;\n  width: 100vw;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst Home = () => {\n  const [projects, setProjects] = React.useState(null);\n\n  React.useEffect(() => {\n    client\n      .getEntries({\n        content_type: \"project\",\n      })\n      .then((entries) => {\n        setProjects(entries.items);\n      });\n  }, []);\n\n  return (\n    <HomeStyled>\n      {projects &&\n        projects.map((project, i) => {\n          return (\n            <Card\n              key={i}\n              fields={project.fields}\n              link={`/projects/${project.fields.slug}`}\n            />\n          );\n        })}\n    </HomeStyled>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport client from \"../contentful\";\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\";\nimport { Redirect } from \"@reach/router\";\n\nconst SingleProject = (props) => {\n  const [project, setProject] = React.useState(null);\n\n  React.useEffect(() => {\n    client\n      .getEntries({\n        content_type: \"project\",\n        \"fields.slug\": props.slug,\n      })\n      .then((entries) => {\n        if (entries.items.length !== 0) {\n          setProject(entries.items[0].fields);\n        } else {\n          setProject([]);\n        }\n      });\n  }, [props.slug]);\n\n  if (project && project.length === 0) {\n    return <Redirect from=\"\" to=\"/404\" noThrow />;\n  }\n\n  return (\n    <div className=\"SingleProject\">\n      <h1>{project && project.title}</h1>\n      <img\n        src={`${project && project.image.fields.file.url}?w=300`}\n        alt={\"\"}\n        height\n      ></img>\n      {documentToReactComponents(project && project.text)}\n    </div>\n  );\n};\n\nexport default SingleProject;\n","import React from \"react\";\n\nconst NotFound = () => {\n  return (\n    <div>\n      <h1>Sorry, nothing here.</h1>\n      <a href=\"/\">Go back</a>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Router } from \"@reach/router\";\nimport Home from \"./pages/Home\";\nimport SingleProject from \"./pages/SingleProject\";\nimport NotFound from \"./pages/NotFound\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Home path=\"/\" />\n        <SingleProject path=\"projects/:slug\" />\n        <NotFound default />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}